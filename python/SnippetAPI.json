{
  "API gemini": {
    "prefix": ".api gemini chat",
    "body": [
      "from google import genai",
      "",
      "client = genai.Client(api_key=\"YOUR_API_KEY\")",
      "",
      "response = client.models.generate_content(",
      "    model=\"gemini-2.0-flash\",",
      "    contents=\"Explain how AI works in a few words\",",
      ")",
      "",
      "print(response.text)"
    ],
    "description": "Generate content using the Gemini API"
  },
  "API openai": {
    "prefix": ".api openai chat",
    "body": [
      "import openai",
      "",
      "openai.api_key = \"YOUR_API_KEY\"",
      "",
      "response = openai.ChatCompletion.create(",
      "    model=\"gemini-2.0-flash\",",
      "    messages=[",
      "        {\"role\": \"user\", \"content\": \"Explain how AI works in a few words\"}",
      "    ]",
      ")",
      "",
      "print(response.choices[0].message.content)"
    ],
    "description": "Generate content using the OpenAI API"
  },
  "Image Generator": {
    "prefix": ".api openai image",
    "body": [
      "import openai",
      "",
      "openai.api_key = \"YOUR_API_KEY\"",
      "",
      "response = openai.Image.create(",
      "    prompt=\"A futuristic cityscape with flying cars\",",
      "    n=1,",
      "    size=\"1024x1024\"",
      ")",
      "",
      "image_url = response['data'][0]['url']",
      "print(image_url)"
    ],
    "description": "Generate an image using the OpenAI API"
  },
  "API gemini image generation": {
    "prefix": ".api gemini image",
    "body": [
      "from google import genai",
      "from google.genai import types",
      "from PIL import Image",
      "from io import BytesIO",
      "import base64",
      "",
      "client = genai.Client()",
      "",
      "contents = ('Hi, can you create a 3d rendered image of a pig '",
      "            'with wings and a top hat flying over a happy '",
      "            'futuristic scifi city with lots of greenery?')",
      "",
      "response = client.models.generate_content(",
      "    model=\"gemini-2.0-flash-preview-image-generation\",",
      "    contents=contents,",
      "    config=types.GenerateContentConfig(",
      "      response_modalities=['TEXT', 'IMAGE']",
      "    )",
      ")",
      "",
      "for part in response.candidates[0].content.parts:",
      "  if part.text is not None:",
      "    print(part.text)",
      "  elif part.inline_data is not None:",
      "    image = Image.open(BytesIO((part.inline_data.data)))",
      "    image.save('gemini-native-image.png')",
      "    image.show()"
    ],
    "description": "Generate a 3D rendered image using the Gemini API"
  },
  "API openai image generation": {
    "prefix": ".api openai image",
    "body": [
      "import openai",
      "",
      "openai.api_key = \"YOUR_API_KEY\"",
      "",
      "response = openai.Image.create(",
      "    prompt=\"A futuristic cityscape with flying cars\",",
      "    n=1,",
      "    size=\"1024x1024\"",
      ")",
      "",
      "image_url = response['data'][0]['url']",
      "print(image_url)"
    ],
    "description": "Generate an image using the OpenAI API"
  },
  "API gemini text to speech": {
    "prefix": ".api gemini tts",
    "body": [
      "from google import genai",
      "from google.genai import types",
      "import base64",
      "from pydub import AudioSegment",
      "from pydub.playback import play",
      "",
      "client = genai.Client()",
      "",
      "text = \"Hello, this is a text-to-speech test using Gemini API.\"",
      "",
      "response = client.models.generate_content(",
      "    model=\"gemini-2.0-flash-preview-tts\",",
      "    contents=text,",
      "    config=types.GenerateContentConfig(",
      "      response_modalities=['AUDIO']",
      "    )",
      ")",
      "",
      "audio_data = base64.b64decode(response.candidates[0].content.parts[0].inline_data.data)",
      "with open('gemini-tts-output.mp3', 'wb') as audio_file:",
      "    audio_file.write(audio_data)",
      "",
      "audio = AudioSegment.from_file('gemini-tts-output.mp3')",
      "play(audio)"
    ],
    "description": "Convert text to speech using the Gemini API"
  },
  "API openai text to speech": {
    "prefix": ".api openai tts",
    "body": [
      "import openai",
      "import base64",
      "from pydub import AudioSegment",
      "from pydub.playback import play",
      "",
      "openai.api_key = \"YOUR_API_KEY\"",
      "",
      "text = \"Hello, this is a text-to-speech test using OpenAI API.\"",
      "",
      "response = openai.Audio.create(",
      "    model=\"whisper-tts\",",
      "    text=text",
      ")",
      "",
      "audio_data = base64.b64decode(response['audio'])",
      "with open('openai-tts-output.mp3', 'wb') as audio_file:",
      "    audio_file.write(audio_data)",
      "",
      "audio = AudioSegment.from_file('openai-tts-output.mp3')",
      "play(audio)"
    ],
    "description": "Convert text to speech using the OpenAI API"
  },
  "API gemini text to image": {
    "prefix": ".api gemini text to image",
    "body": [
      "from google import genai",
      "from google.genai import types",
      "",
      "client = genai.Client()",
      "",
      "text = \"A futuristic cityscape with flying cars\"",
      "",
      "response = client.models.generate_content(",
      "    model=\"gemini-2.0-flash-preview-image-generation\",",
      "    contents=text,",
      ")",
      "",
      "for part in response.candidates[0].content.parts:",
      "  if part.text is not None:",
      "    print(part.text)",
      "  elif part.inline_data is not None:",
      "    with open('gemini-text-to-image.png', 'wb') as image_file:",
      "        image_file.write(part.inline_data.data)"
    ],
    "description": "Generate an image from text using the Gemini API"
  },

  "API openai text to image": {
    "prefix": ".api openai text to image",
    "body": [
      "import openai",
      "",
      "openai.api_key = \"YOUR_API_KEY\"",
      "",
      "response = openai.Image.create(",
      "    prompt=\"A futuristic cityscape with flying cars\",",
      "    n=1,",
      "    size=\"1024x1024\"",
      ")",
      "",
      "image_url = response['data'][0]['url']",
      "print(image_url)"
    ],
    "description": "Generate an image from text using the OpenAI API"
  },
  "API gemini text to audio": {
    "prefix": ".api gemini text to audio",
    "body": [
      "from google import genai",
      "from google.genai import types",
      "",
      "client = genai.Client()",
      "",
      "text = \"Hello, this is a text-to-audio test using Gemini API.\"",
      "",
      "response = client.models.generate_content(",
      "    model=\"gemini-2.0-flash-preview-tts\",",
      "    contents=text,",
      ")",
      "",
      "for part in response.candidates[0].content.parts:",
      "  if part.text is not None:",
      "    print(part.text)",
      "  elif part.inline_data is not None:",
      "    with open('gemini-text-to-audio.mp3', 'wb') as audio_file:",
      "        audio_file.write(part.inline_data.data)"
    ],
    "description": "Convert text to audio using the Gemini API"
  },
  "API openai text to audio": {
    "prefix": ".api openai text to audio",
    "body": [
      "import openai",
      "",
      "openai.api_key = \"YOUR_API_KEY\"",
      "",
      "response = openai.Audio.create(",
      "    model=\"whisper-tts\",",
      "    text=\"Hello, this is a text-to-audio test using OpenAI API.\"",
      ")",
      "",
      "audio_data = base64.b64decode(response['audio'])",
      "with open('openai-tts-output.mp3', 'wb') as audio_file:",
      "    audio_file.write(audio_data)",
      "",
      "audio = AudioSegment.from_file('openai-tts-output.mp3')",
      "play(audio)"
    ],
    "description": "Convert text to audio using the OpenAI API",
    "API gemini text to video": {
      "prefix": ".api gemini text to video",
      "body": [
        "from google import genai",
        "from google.genai import types",
        "",
        "client = genai.Client()",
        "",
        "text = \"A futuristic cityscape with flying cars\"",
        "",
        "response = client.models.generate_content(",
        "    model=\"gemini-2.0-flash-preview-video-generation\",",
        "    contents=text,",
        ")",
        "",
        "for part in response.candidates[0].content.parts:",
        "  if part.text is not None:",
        "    print(part.text)",
        "  elif part.inline_data is not None:",
        "    with open('gemini-text-to-video.mp4', 'wb') as video_file:",
        "        video_file.write(part.inline_data.data)"
      ],
      "description": "Generate a video from text using the Gemini API"
    }
  },
  "API openai text to video": {
    "prefix": ".api openai text to video",
    "body": [
      "import openai",
      "",
      "openai.api_key = \"YOUR_API_KEY\"",
      "",
      "response = openai.Video.create(",
      "    prompt=\"A futuristic cityscape with flying cars\",",
      "    n=1,",
      "    size=\"1024x1024\"",
      ")",
      "",
      "video_url = response['data'][0]['url']",
      "print(video_url)"
    ],
    "description": "Generate a video from text using the OpenAI API"
  },

  "API google finance": {
    "prefix": ".api google finance",
    "body": [
      "import requests",
      "",
      "def get_stock_price(symbol):",
      "    url = f\"https://www.google.com/finance/quote/{symbol}:NASDAQ\"",
      "    response = requests.get(url)",
      "    if response.status_code == 200:",
      "        return response.text",
      "    else:",
      "        return None",
      "",
      "stock_symbol = \"AAPL\"",
      "price = get_stock_price(stock_symbol)",
      "if price:",
      "    print(f\"The current price of {stock_symbol} is: {price}\")",
      "else:",
      "    print(\"Failed to retrieve stock price.\")"
    ],
    "description": "Fetch stock price using Google Finance API"
  },
  "API google weather": {
    "prefix": ".api google weather",
    "body": [
      "import requests",
      "",
      "def get_weather(city):",
      "    api_key = \"YOUR_API_KEY\"",
      "    url = f\"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}\"",
      "    response = requests.get(url)",
      "    if response.status_code == 200:",
      "        return response.json()",
      "    else:",
      "        return None",
      "",
      "city = \"London\"",
      "weather = get_weather(city)",
      "if weather:",
      "    print(f\"The current weather in {city} is: {weather}\")",
      "else:",
      "    print(\"Failed to retrieve weather data.\")"
    ],
    "description": "Fetch weather data using Google Weather API"
  },
  "API google news": {
    "prefix": ".api google news",
    "body": [
      "import requests",
      "",
      "def get_news(query):",
      "    api_key = \"YOUR_API_KEY\"",
      "    url = f\"https://newsapi.org/v2/everything?q={query}&apiKey={api_key}\"",
      "    response = requests.get(url)",
      "    if response.status_code == 200:",
      "        return response.json()",
      "    else:",
      "        return None",
      "",
      "query = \"Tesla\"",
      "news = get_news(query)",
      "if news:",
      "    for article in news[\"articles\"]:",
      "        print(f\"Title: {article[\"title\"]}, Source: {article[\"source\"][\"name\"]}\")",
      "else:",
      "    print(\"Failed to retrieve news data.\")"
    ],
    "description": "Fetch news articles using Google News API"
  },
  "API google translate": {
    "prefix": ".api google translate",
    "body": [
      "from googletrans import Translator",
      "",
      "translator = Translator()",
      "",
      "text = \"Hello, how are you?\"",
      "translated = translator.translate(text, dest='es')",
      "",
      "print(f\"Original: {text}\")",
      "print(f\"Translated: {translated.text}\")"
    ],
    "description": "Translate text using Google Translate API"
  },
  "API google maps": {
    "prefix": ".api google maps",
    "body": [
      "import requests",
      "",
      "def get_directions(origin, destination):",
      "    api_key = \"YOUR_API_KEY\"",
      "    url = f\"https://maps.googleapis.com/maps/api/directions/json?origin={origin}&destination={destination}&key={api_key}\"",
      "    response = requests.get(url)",
      "    if response.status_code == 200:",
      "        return response.json()",
      "    else:",
      "        return None",
      "",
      "origin = \"New York, NY\"",
      "destination = \"Los Angeles, CA\"",
      "directions = get_directions(origin, destination)",
      "if directions:",
      "    print(f\"Directions from {origin} to {destination}: {directions}\")",
      "else:",
      "    print(\"Failed to retrieve directions.\")"
    ],
    "description": "Fetch directions using Google Maps API"
  },
  "API google sports": {
    "prefix": ".api google sports",
    "body": [
      "import requests",
      "",
      "def get_sports_data(sport):",
      "    api_key = \"YOUR_API_KEY\"",
      "    url = f\"https://api.sportsdata.io/v4/{sport}/scores/json/Games?key={api_key}\"",
      "    response = requests.get(url)",
      "    if response.status_code == 200:",
      "        return response.json()",
      "    else:",
      "        return None",
      "",
      "sport = \"basketball\"",
      "data = get_sports_data(sport)",
      "if data:",
      "    for game in data:",
      "        print(f\"Game: {game['id']}, Score: {game['score']}\")",
      "else:",
      "    print(\"Failed to retrieve sports data.\")"
    ],
    "description": "Fetch sports data using SportsData API"
  },

  "API google shopping": {
    "prefix": ".api google shopping",
    "body": [
      "import requests",
      "",
      "def get_shopping_data(query):",
      "    api_key = \"YOUR_API_KEY\"",
      "    url = f\"https://api.google.com/shopping/search?query={query}&key={api_key}\"",
      "    response = requests.get(url)",
      "    if response.status_code == 200:",
      "        return response.json()",
      "    else:",
      "        return None",
      "",
      "query = \"laptop\"",
      "data = get_shopping_data(query)",
      "if data:",
      "    for item in data['items']:",
      "        print(f\"Item: {item['title']}, Price: {item['price']}\")",
      "else:",
      "    print(\"Failed to retrieve shopping data.\")"
    ],
    "description": "Fetch shopping data using Google Shopping API"
  },
  "API google videos": {
    "prefix": ".api google videos",
    "body": [
      "import requests",
      "",
      "def get_video_data(query):",
      "    api_key = \"YOUR_API_KEY\"",
      "    url = f\"https://www.googleapis.com/youtube/v3/search?part=snippet&q={query}&key={api_key}\"",
      "    response = requests.get(url)",
      "    if response.status_code == 200:",
      "        return response.json()",
      "    else:",
      "        return None",
      "",
      "query = \"Python programming\"",
      "data = get_video_data(query)",
      "if data:",
      "    for item in data['items']:",
      "        print(f\"Video: {item['snippet']['title']}, Channel: {item['snippet']['channelTitle']}\")",
      "else:",
      "    print(\"Failed to retrieve video data.\")"
    ],
    "description": "Fetch video data using Google Videos API"
  },
  "API google images": {
    "prefix": ".api google images",
    "body": [
      "import requests",
      "",
      "def get_image_data(query):",
      "    api_key = \"YOUR_API_KEY\"",
      "    url = f\"https://www.googleapis.com/customsearch/v1?q={query}&cx=YOUR_CX&key={api_key}\"",
      "    response = requests.get(url)",
      "    if response.status_code == 200:",
      "        return response.json()",
      "    else:",
      "        return None",
      "",
      "query = \"beautiful landscapes\"",
      "data = get_image_data(query)",
      "if data:",
      "    for item in data['items']:",
      "        print(f\"Image: {item['link']}, Title: {item['title']}\")",
      "else:",
      "    print(\"Failed to retrieve image data.\")"
    ],
    "description": "Fetch image data using Google Images API"
  },
  "API google lens": {
    "prefix": ".api google lens",
    "body": [
      "import requests",
      "",
      "def get_lens_data(image_path):",
      "    api_key = \"YOUR_API_KEY\"",
      "    url = f\"https://vision.googleapis.com/v1/images:annotate?key={api_key}\"",
      "    headers = {\"Content-Type\": \"application/json\"}",
      "    data = {\"requests\": [{\"image\": {\"source\": {\"imageUri\": image_path}}, \"features\": [{\"type\": \"LABEL_DETECTION\"}]}]}",
      "    response = requests.post(url, headers=headers, json=data)",
      "    if response.status_code == 200:",
      "        return response.json()",
      "    else:",
      "        return None",
      "",
      "image_path = \"https://example.com/image.jpg\"",
      "data = get_lens_data(image_path)",
      "if data:",
      "    for label in data['responses'][0]['labelAnnotations']:",
      "        print(f\"Label: {label['description']}, Score: {label['score']}\")",
      "else:",
      "    print(\"Failed to retrieve lens data.\")"
    ],
    "description": "Fetch lens data using Google Lens API"
  },
  "API google jobs": {
    "prefix": ".api google jobs",
    "body": [
      "import requests",
      "",
      "def get_job_data(query):",
      "    api_key = \"YOUR_API_KEY\"",
      "    url = f\"https://jobs.googleapis.com/v1/jobs?query={query}&key={api_key}\"",
      "    response = requests.get(url)",
      "    if response.status_code == 200:",
      "        return response.json()",
      "    else:",
      "        return None",
      "",

      "query = \"software engineer\"",
      "data = get_job_data(query)",
      "if data:",
      "    for item in data['jobs']:",
      "        print(f\"Job Title: {item['title']}, Company: {item['company']}, Location: {item['location']}\")",
      "else:",
      "    print(\"Failed to retrieve job data.\")"
    ],
    "description": "Fetch job data using Google Jobs API"
  },
  "API google play store": {
    "prefix": ".api google play store",
    "body": [
      "import requests",
      "",
      "def get_play_store_data(app_id):",
      "    url = f\"https://play.google.com/store/apps/details?id={app_id}&hl=en&gl=US\"",
      "    response = requests.get(url)",
      "    if response.status_code == 200:",
      "        return response.text",
      "    else:",
      "        return None",
      "",
      "app_id = \"com.example.app\"",
      "data = get_play_store_data(app_id)",
      "if data:",
      "    print(f\"App Data: {data}\")",
      "else:",
      "    print(\"Failed to retrieve app data.\")"
    ],
    "description": "Fetch app data using Google Play Store API"
  },
  "API youtube": {
    "prefix": ".api youtube",
    "body": [
      "import requests",
      "",
      "def get_youtube_data(query):",
      "    api_key = \"YOUR_API_KEY\"",
      "    url = f\"https://www.googleapis.com/youtube/v3/search?q={query}&key={api_key}\"",
      "    response = requests.get(url)",
      "    if response.status_code == 200:",
      "        return response.json()",
      "    else:",
      "        return None",
      "",
      "query = \"Python programming\"",
      "data = get_youtube_data(query)",
      "if data:",
      "    for item in data['items']:",
      "        print(f\"Video: {item['snippet']['title']}, Channel: {item['snippet']['channelTitle']}\")",
      "else:",
      "    print(\"Failed to retrieve YouTube data.\")"
    ],
    "description": "Fetch YouTube data using YouTube API"
  }
 }

